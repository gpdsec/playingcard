{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"YOLOv5","provenance":[{"file_id":"1zo4EMfctXpAbFJhISAawXLe3nSreox_u","timestamp":1648331817543},{"file_id":"https://github.com/ultralytics/yolov5/blob/master/tutorial.ipynb","timestamp":1648328565294}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"00y_sWqFGOwG","executionInfo":{"status":"ok","timestamp":1648380707518,"user_tz":-330,"elapsed":19166,"user":{"displayName":"Guru Dubey","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjAqBY0LwBrBVfdbbcVxxLBh4E2J6_HVoaHa5J7=s64","userId":"08063943738595728989"}},"outputId":"34f6399a-5b4c-4e46-a941-3c3b871800a9","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["# **Details**\n","\n","\n","*   This model trained on yolov5 algorithm for 100 epoch with highest data augmentation setings\n","*   This model trained with just 296 images for six classes\n","*   classes are ['king', 'queen', 'jack', 'ten', 'nine', 'ace']\n","*   Dataset is too small for efective recognition when it has to classify from almost similar images\n","\n","* Colab Notebook does not support webcam inferencing. It required javascript tweaking and two days not enough to do so.\n","* I do want to create dataset but time was not enough to complete annotations\n","\n","\n","\n"],"metadata":{"id":"PK8jKzzIP_PB"}},{"cell_type":"markdown","metadata":{"id":"7mGmQbAO5pQb"},"source":["# **Setup**\n","\n","Clone repo, install dependencies and check PyTorch and GPU."]},{"cell_type":"code","metadata":{"id":"wbvMlHd_QwMG","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a894b0b0-2272-459e-a155-0ea25543b7d7","executionInfo":{"status":"ok","timestamp":1648380726538,"user_tz":-330,"elapsed":13933,"user":{"displayName":"Guru Dubey","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjAqBY0LwBrBVfdbbcVxxLBh4E2J6_HVoaHa5J7=s64","userId":"08063943738595728989"}}},"source":["!git clone https://github.com/ultralytics/yolov5  # clone\n","%cd yolov5\n","%pip install -qr requirements.txt  # install\n","google.colab.patches import cv2_imshow\n","import torch\n","from yolov5 import utils\n","#\n","display = utils.notebook_init()  # checks"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["YOLOv5 ðŸš€ v6.1-69-g7830e91 torch 1.10.0+cu111 CUDA:0 (Tesla K80, 11441MiB)\n"]},{"output_type":"stream","name":"stdout","text":["Setup complete âœ… (2 CPUs, 12.7 GB RAM, 39.9/78.2 GB disk)\n"]}]},{"cell_type":"code","source":["\n","import torch\n","from yolov5 import utils\n","from yolov5.models.common import DetectMultiBackend\n","# display = utils.notebook_init()  # checks"],"metadata":{"id":"RfPTcVNp6Hff"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Command used for training\n","~~~\n","!python--weights yolov5s.pt --data data/datasets.yaml --epoch 100 --img 640 --batch-size 8 --hyp hyp.scratch-high.yaml\n","~~~"],"metadata":{"id":"YG-VN-O-OZp-"}},{"cell_type":"markdown","source":["###### function for  infrensing with image with help of basic yolov5 API"],"metadata":{"id":"CMDQ3PaRkpVi"}},{"cell_type":"code","source":["# YOLOv5 ðŸš€ by Ultralytics, GPL-3.0 license\n","\n","\n","import argparse\n","import os\n","import sys\n","from pathlib import Path\n","\n","import torch\n","import torch.backends.cudnn as cudnn\n","from models.common import DetectMultiBackend\n","from utils.datasets import IMG_FORMATS, VID_FORMATS, LoadImages, LoadStreams\n","from utils.general import (LOGGER, check_file, check_img_size, check_imshow, check_requirements, colorstr, cv2,\n","                           increment_path, non_max_suppression, print_args, scale_coords, strip_optimizer, xyxy2xywh)\n","from utils.plots import Annotator, colors, save_one_box\n","from utils.torch_utils import select_device, time_sync\n","\n","@torch.no_grad()\n","def run(weights=\"/content/drive/MyDrive/Test2022/playingcard/best.pt\",  # model.pt path(s)\n","        source='data/images',  # file/dir/URL/glob, 0 for webcam\n","        data='data/coco128.yaml',  # dataset.yaml path\n","        imgsz=(640, 640),  # inference size (height, width)\n","        conf_thres=0.25,  # confidence threshold\n","        iou_thres=0.45,  # NMS IOU threshold\n","        max_det=1000,  # maximum detections per image\n","        device='',  # cuda device, i.e. 0 or 0,1,2,3 or cpu\n","        view_img=False,  # show results\n","        save_txt=False,  # save results to *.txt\n","        save_conf=False,  # save confidences in --save-txt labels\n","        save_crop=False,  # save cropped prediction boxes\n","        nosave=False,  # do not save images/videos\n","        classes=None,  # filter by class: --class 0, or --class 0 2 3\n","        agnostic_nms=False,  # class-agnostic NMS\n","        augment=False,  # augmented inference\n","        visualize=False,  # visualize features\n","        update=False,  # update all models\n","        project='runs/detect',  # save results to project/name\n","        name='exp',  # save results to project/name\n","        exist_ok=False,  # existing project/name ok, do not increment\n","        line_thickness=3,  # bounding box thickness (pixels)\n","        hide_labels=False,  # hide labels\n","        hide_conf=False,  # hide confidences\n","        half=False,  # use FP16 half-precision inference\n","        dnn=False,  # use OpenCV DNN for ONNX inference\n","        ):\n","    source = str(source)\n","    save_img = not nosave and not source.endswith('.txt')  # save inference images\n","    is_file = Path(source).suffix[1:] in (IMG_FORMATS + VID_FORMATS)\n","    is_url = source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://'))\n","    webcam = source.isnumeric() or source.endswith('.txt') or (is_url and not is_file)\n","    if is_url and is_file:\n","        source = check_file(source)  # download\n","\n","    # Directories\n","    save_dir = increment_path(Path(project) / name, exist_ok=exist_ok)  # increment run\n","    (save_dir / 'labels' if save_txt else save_dir).mkdir(parents=True, exist_ok=True)  # make dir\n","\n","    # Load model\n","    device = select_device(device)\n","    print(f\"data : {data}\")\n","    model = DetectMultiBackend(weights, device=device, dnn=dnn, data=data, fp16=half)\n","    stride, names, pt = model.stride, model.names, model.pt\n","    imgsz = check_img_size(imgsz, s=stride)  # check image size\n","\n","    # Dataloader\n","    if webcam:\n","        view_img = check_imshow()\n","        cudnn.benchmark = True  # set True to speed up constant image size inference\n","        dataset = LoadStreams(source, img_size=imgsz, stride=stride, auto=pt)\n","        bs = len(dataset)  # batch_size\n","    else:\n","        dataset = LoadImages(source, img_size=imgsz, stride=stride, auto=pt)\n","        bs = 1  # batch_size\n","    vid_path, vid_writer = [None] * bs, [None] * bs\n","\n","    # Run inference\n","    model.warmup(imgsz=(1 if pt else bs, 3, *imgsz))  # warmup\n","    dt, seen = [0.0, 0.0, 0.0], 0\n","    for path, im, im0s, vid_cap, s in dataset:\n","        t1 = time_sync()\n","        im = torch.from_numpy(im).to(device)\n","        im = im.half() if model.fp16 else im.float()  # uint8 to fp16/32\n","        im /= 255  # 0 - 255 to 0.0 - 1.0\n","        if len(im.shape) == 3:\n","            im = im[None]  # expand for batch dim\n","        t2 = time_sync()\n","        dt[0] += t2 - t1\n","\n","        # Inference\n","        visualize = increment_path(save_dir / Path(path).stem, mkdir=True) if visualize else False\n","        pred = model(im, augment=augment, visualize=visualize)\n","        t3 = time_sync()\n","        dt[1] += t3 - t2\n","\n","        # NMS\n","        pred = non_max_suppression(pred, conf_thres, iou_thres, classes, agnostic_nms, max_det=max_det)\n","        dt[2] += time_sync() - t3\n","\n","        # Second-stage classifier (optional)\n","        # pred = utils.general.apply_classifier(pred, classifier_model, im, im0s)\n","\n","        # Process predictions\n","        for i, det in enumerate(pred):  # per image\n","            seen += 1\n","            if webcam:  # batch_size >= 1\n","                p, im0, frame = path[i], im0s[i].copy(), dataset.count\n","                s += f'{i}: '\n","            else:\n","                p, im0, frame = path, im0s.copy(), getattr(dataset, 'frame', 0)\n","\n","            p = Path(p)  # to Path\n","            save_path = str(save_dir / p.name)  # im.jpg\n","            txt_path = str(save_dir / 'labels' / p.stem) + ('' if dataset.mode == 'image' else f'_{frame}')  # im.txt\n","            s += '%gx%g ' % im.shape[2:]  # print string\n","            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]  # normalization gain whwh\n","            imc = im0.copy() if save_crop else im0  # for save_crop\n","            annotator = Annotator(im0, line_width=line_thickness, example=str(names))\n","            if len(det):\n","                # Rescale boxes from img_size to im0 size\n","                det[:, :4] = scale_coords(im.shape[2:], det[:, :4], im0.shape).round()\n","\n","                # Print results\n","                for c in det[:, -1].unique():\n","                    n = (det[:, -1] == c).sum()  # detections per class\n","                    s += f\"{n} {names[int(c)]}{'s' * (n > 1)}, \"  # add to string\n","\n","                # Write results\n","                for *xyxy, conf, cls in reversed(det):\n","                    if save_txt:  # Write to file\n","                        xywh = (xyxy2xywh(torch.tensor(xyxy).view(1, 4)) / gn).view(-1).tolist()  # normalized xywh\n","                        line = (cls, *xywh, conf) if save_conf else (cls, *xywh)  # label format\n","                        with open(txt_path + '.txt', 'a') as f:\n","                            f.write(('%g ' * len(line)).rstrip() % line + '\\n')\n","\n","                    if save_img or save_crop or view_img:  # Add bbox to image\n","                        c = int(cls)  # integer class\n","                        label = None if hide_labels else (names[c] if hide_conf else f'{names[c]} {conf:.2f}')\n","                        annotator.box_label(xyxy, label, color=colors(c, True))\n","                        if save_crop:\n","                            save_one_box(xyxy, imc, file=save_dir / 'crops' / names[c] / f'{p.stem}.jpg', BGR=True)\n","\n","            # Stream results\n","            im0 = annotator.result()\n","            if view_img:\n","                cv2.imshow(str(p), im0)\n","                cv2.waitKey(1)  # 1 millisecond\n","\n","            # Save results (image with detections)\n","            if save_img:\n","                if dataset.mode == 'image':\n","                    cv2.imwrite(save_path, im0)\n","                else:  # 'video' or 'stream'\n","                    if vid_path[i] != save_path:  # new video\n","                        vid_path[i] = save_path\n","                        if isinstance(vid_writer[i], cv2.VideoWriter):\n","                            vid_writer[i].release()  # release previous video writer\n","                        if vid_cap:  # video\n","                            fps = vid_cap.get(cv2.CAP_PROP_FPS)\n","                            w = int(vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n","                            h = int(vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n","                        else:  # stream\n","                            fps, w, h = 30, im0.shape[1], im0.shape[0]\n","                        save_path = str(Path(save_path).with_suffix('.mp4'))  # force *.mp4 suffix on results videos\n","                        vid_writer[i] = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*'mp4v'), fps, (w, h))\n","                    vid_writer[i].write(im0)\n","\n","        # Print time (inference-only)\n","        LOGGER.info(f'{s}Done. ({t3 - t2:.3f}s)')\n","\n","    # Print results\n","    t = tuple(x / seen * 1E3 for x in dt)  # speeds per image\n","    LOGGER.info(f'Speed: %.1fms pre-process, %.1fms inference, %.1fms NMS per image at shape {(1, 3, *imgsz)}' % t)\n","    if save_txt or save_img:\n","        s = f\"\\n{len(list(save_dir.glob('labels/*.txt')))} labels saved to {save_dir / 'labels'}\" if save_txt else ''\n","        LOGGER.info(f\"Results saved to {colorstr('bold', save_dir)}{s}\")\n","    if update:\n","        strip_optimizer(weights)  # update model (to fix SourceChangeWarning)\n"],"metadata":{"id":"M7LeJCf85eVe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["source=\"/content/drive/MyDrive/Test2022/playingcard/images\"\n","run(source=source)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UGNmgG52Hfxq","executionInfo":{"status":"ok","timestamp":1648381870435,"user_tz":-330,"elapsed":3916,"user":{"displayName":"Guru Dubey","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjAqBY0LwBrBVfdbbcVxxLBh4E2J6_HVoaHa5J7=s64","userId":"08063943738595728989"}},"outputId":"4988a8cc-ce9a-445a-b7f7-bd544977e0d0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["YOLOv5 ðŸš€ v6.1-69-g7830e91 torch 1.10.0+cu111 CUDA:0 (Tesla K80, 11441MiB)\n","\n","Fusing layers... \n"]},{"output_type":"stream","name":"stdout","text":["data : data/coco128.yaml\n"]},{"output_type":"stream","name":"stderr","text":["Model summary: 213 layers, 7026307 parameters, 0 gradients, 15.8 GFLOPs\n","WARNING: --img-size (640, 640) must be multiple of max stride 32, updating to [640, 640]\n","image 1/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2383.JPG: 640x480 1 ace, Done. (0.026s)\n","image 2/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2384.JPG: 640x480 1 king, 1 jack, Done. (0.026s)\n","image 3/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2387.JPG: 640x480 1 king, Done. (0.026s)\n","image 4/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2391.JPG: 640x480 1 nine, Done. (0.024s)\n","image 5/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2395.JPG: 640x480 1 nine, Done. (0.024s)\n","image 6/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2403.JPG: 640x480 1 king, 1 queen, 1 jack, Done. (0.024s)\n","image 7/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2432.JPG: 640x480 1 ten, 1 nine, Done. (0.024s)\n","image 8/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2433.JPG: 640x480 1 king, 1 queen, 1 jack, Done. (0.024s)\n","image 9/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2435.JPG: 640x480 1 nine, Done. (0.025s)\n","image 10/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2436.JPG: 640x480 1 king, 1 queen, Done. (0.024s)\n","image 11/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2440.JPG: 640x480 1 king, 1 jack, Done. (0.024s)\n","image 12/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2461.JPG: 640x480 1 nine, 1 ace, Done. (0.024s)\n","image 13/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2463.JPG: 640x480 1 ten, 1 nine, Done. (0.024s)\n","image 14/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2470.JPG: 640x480 1 ace, Done. (0.024s)\n","image 15/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2476.JPG: 640x480 1 ace, Done. (0.024s)\n","image 16/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2479.JPG: 640x480 1 king, 1 jack, Done. (0.025s)\n","image 17/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2482.JPG: 640x480 1 king, 1 jack, Done. (0.024s)\n","image 18/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2485.JPG: 640x480 1 king, 1 jack, Done. (0.024s)\n","image 19/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2510.JPG: 640x480 1 king, Done. (0.024s)\n","image 20/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2530.JPG: 640x480 1 king, Done. (0.024s)\n","image 21/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2531.JPG: 640x480 1 king, 1 jack, Done. (0.024s)\n","image 22/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2532.JPG: 640x480 1 ace, Done. (0.024s)\n","image 23/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2539.JPG: 640x480 Done. (0.024s)\n","image 24/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2540.JPG: 640x480 1 ten, 1 nine, Done. (0.024s)\n","image 25/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2544.JPG: 640x480 1 ten, 1 nine, Done. (0.024s)\n","image 26/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2550.JPG: 640x480 1 king, 1 jack, 1 ace, Done. (0.024s)\n","image 27/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2551.JPG: 640x480 Done. (0.024s)\n","image 28/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2554.JPG: 640x480 1 king, Done. (0.024s)\n","image 29/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2555.JPG: 640x480 1 king, Done. (0.025s)\n","image 30/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2557.JPG: 640x480 1 king, 1 ace, Done. (0.024s)\n","image 31/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2560.JPG: 640x480 3 kings, 1 queen, 1 jack, 1 ten, 1 nine, Done. (0.024s)\n","image 32/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2561.JPG: 640x480 1 king, 1 jack, 2 tens, 2 nines, 1 ace, Done. (0.024s)\n","image 33/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2564.JPG: 640x480 2 kings, 1 queen, 1 jack, 1 ten, 1 nine, 1 ace, Done. (0.024s)\n","image 34/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2568.JPG: 640x480 1 king, 1 jack, 1 nine, Done. (0.024s)\n","image 35/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2571.JPG: 640x480 1 king, 1 jack, 1 ten, 2 nines, Done. (0.024s)\n","image 36/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2573.JPG: 640x480 2 kings, 2 jacks, 2 aces, Done. (0.024s)\n","image 37/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2580.JPG: 640x480 2 kings, 2 tens, 2 nines, 1 ace, Done. (0.024s)\n","image 38/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2583.JPG: 640x480 1 king, 1 queen, 1 jack, 2 tens, 2 nines, 1 ace, Done. (0.024s)\n","image 39/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2585.JPG: 640x480 3 kings, 1 jack, 1 ten, 1 nine, 1 ace, Done. (0.024s)\n","image 40/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2591.JPG: 640x480 1 king, 1 jack, 1 ten, 1 nine, 2 aces, Done. (0.025s)\n","image 41/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2592.JPG: 640x480 2 kings, 1 queen, 2 jacks, 1 ten, 1 nine, 1 ace, Done. (0.024s)\n","image 42/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2594.JPG: 640x480 3 kings, 1 jack, 1 ten, 1 nine, Done. (0.024s)\n","image 43/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2595.JPG: 640x480 1 king, 1 ace, Done. (0.024s)\n","image 44/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2598.JPG: 640x480 1 nine, Done. (0.024s)\n","image 45/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2600.JPG: 640x480 2 kings, 1 jack, 1 nine, Done. (0.024s)\n","image 46/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2604.JPG: 640x480 1 ten, 1 nine, 1 ace, Done. (0.024s)\n","image 47/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2634.JPG: 640x480 2 kings, Done. (0.024s)\n","image 48/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2636.JPG: 640x480 2 kings, 1 jack, Done. (0.024s)\n","image 49/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2639.JPG: 640x480 1 king, 1 queen, 1 jack, 1 ten, 1 nine, Done. (0.024s)\n","image 50/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2640.JPG: 640x480 1 king, 1 queen, 1 ace, Done. (0.024s)\n","image 51/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2647.JPG: 640x480 1 ten, 1 nine, 1 ace, Done. (0.024s)\n","image 52/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2651.JPG: 640x480 2 kings, 1 jack, Done. (0.024s)\n","image 53/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2654.JPG: 640x480 1 ten, 2 nines, 1 ace, Done. (0.024s)\n","image 54/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2656.JPG: 640x480 1 king, 1 ten, 2 nines, Done. (0.024s)\n","image 55/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2662.JPG: 640x480 2 kings, 1 queen, 1 jack, Done. (0.024s)\n","image 56/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2670.JPG: 640x480 2 aces, Done. (0.024s)\n","image 57/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2675.JPG: 640x480 3 kings, 1 ten, 1 nine, Done. (0.024s)\n","image 58/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2677.JPG: 640x480 1 ten, 2 nines, Done. (0.024s)\n","image 59/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2678.JPG: 640x480 2 kings, Done. (0.024s)\n","image 60/67 /content/drive/MyDrive/Test2022/playingcard/images/IMG_2686.JPG: 640x480 2 kings, 1 queen, 1 jack, 1 ten, 1 nine, Done. (0.024s)\n","image 61/67 /content/drive/MyDrive/Test2022/playingcard/images/cam_image2.jpg: 384x640 4 kings, 2 jacks, Done. (0.021s)\n","image 62/67 /content/drive/MyDrive/Test2022/playingcard/images/cam_image4.jpg: 384x640 4 kings, 1 queen, 4 jacks, Done. (0.021s)\n","image 63/67 /content/drive/MyDrive/Test2022/playingcard/images/cam_image45.jpg: 384x640 2 kings, 1 queen, 1 ten, 1 nine, 1 ace, Done. (0.021s)\n","image 64/67 /content/drive/MyDrive/Test2022/playingcard/images/cam_image5.jpg: 384x640 4 tens, 4 nines, Done. (0.021s)\n","image 65/67 /content/drive/MyDrive/Test2022/playingcard/images/cam_image6.jpg: 384x640 4 tens, 4 nines, Done. (0.021s)\n","image 66/67 /content/drive/MyDrive/Test2022/playingcard/images/cam_image7.jpg: 384x640 4 kings, 1 queen, 3 jacks, Done. (0.021s)\n","image 67/67 /content/drive/MyDrive/Test2022/playingcard/images/cam_image8.jpg: 384x640 4 aces, Done. (0.021s)\n","Speed: 0.5ms pre-process, 24.0ms inference, 1.6ms NMS per image at shape (1, 3, 640, 640)\n","Results saved to \u001b[1mruns/detect/exp3\u001b[0m\n"]}]},{"cell_type":"markdown","source":["## ***Credits***\n","Dataset [Source](https://github.com/EdjeElectronics/TensorFlow-Object-Detection-API-Tutorial-Train-Multiple-Objects-Windows-10)"],"metadata":{"id":"1vGXkdIo8pa9"}}]}